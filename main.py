from dotenv import load_dotenv
from agno.agent import Agent
import json
load_dotenv()
from agno.models.google import Gemini
from agno.db.postgres import PostgresDb
import os
from tools import calc_imc, calc_tdee, get_user_info
from crud import get_user_conversation, select_by_id, select, delete, update, insert, select_by_name, get_all_interactions_by_user, hallutination_checks
import time

id = 7
session_id = str(id)
DATABASE_URL = os.getenv("DATABASE_URL")

db = PostgresDb(
    db_url=DATABASE_URL,
    memory_table="memories",
)





agent_saude = Agent(model=Gemini(id="gemini-2.0-flash-lite"),
              system_message="Voc√™ √© um coach de sa√∫de confi√°vel e inteligente. Sempre consulte a ferramenta `get_user_info` com o nome da pessoa antes de responder.  ‚ö†Ô∏è Nunca afirme lembrar de algo que o usu√°rio disse anteriormente, a menos que esteja no hist√≥rico fornecido no contexto da conversa. Sua miss√£o √© dar conselhos de sa√∫de baseados apenas em fatos. ",
              db=db,
              tools=[calc_imc, calc_tdee, get_user_info],
              add_history_to_context=True,
              enable_user_memories=True)

critic = Agent(
    model=Gemini(id="gemini-2.0-flash-lite"),
    system_message="""
Voc√™ √© um **agente cr√≠tico dial√≥gico e √©tico**, inspirado em **Mikhail Bakhtin** e na vis√£o integral do ser humano.

Sua miss√£o √© **avaliar as respostas do agente de sa√∫de**, n√£o como um juiz, mas como um **int√©rprete das vozes e contradi√ß√µes humanas**.

---

### üß© Diretrizes de linguagem dial√≥gica paradoxal
- Trate **os opostos como complementares**: disciplina √ó prazer, controle √ó liberdade, biol√≥gico √ó espiritual.
- Evite simplificar: reconhe√ßa que **a verdade emerge do di√°logo entre for√ßas em tens√£o**.
- O erro pode revelar uma necessidade leg√≠tima; a coer√™ncia pode ocultar rigidez.
- Analise o discurso como uma **polifonia**: cada frase traz ecos de valores, cren√ßas e contextos.

---

### üß≠ Contextos que voc√™ deve sempre considerar
Avalie como a resposta do agente se articula com a jornada integral do sujeito humano, incluindo:

1. **Biol√≥gico:** corpo, metabolismo, neurotransmissores, sono, alimenta√ß√£o, atividade f√≠sica.
2. **Mental e psicol√≥gico-emocional:** estresse, ansiedade, regula√ß√£o emocional, h√°bitos de pensamento.
3. **Social, espiritual e ambiental:** qualidade dos v√≠nculos sociais; influ√™ncia de ambientes n√£o saud√°veis (bebidas, drogas, excesso de games, redes sociais, pornografia, festas excessivas) versus pr√°ticas que fortalecem o sentido (ora√ß√£o, leitura meditativa, espiritualidade, frequ√™ncia a missas ou comunidades).

Procure mostrar **como escolhas di√°rias constroem ou corroem a harmonia entre esses n√≠veis**.

---

### üßÆ Sa√≠da estruturada
Sempre devolva a resposta **em JSON** com o seguinte formato:

{
  "status": "ok" | "parcial" | "alucinacao",
  "score": n√∫mero entre 0 e 1,
  "critic_agent": "Gemini 2.5",
  "criteria": {
    "coerencia": n√∫mero entre 0 e 1,
    "factualidade": n√∫mero entre 0 e 1,
    "dialogicidade": n√∫mero entre 0 e 1
  },
  "justificativas": {
  "coerencia": "explique aqui como chegou a essa nota",
  "factualidade": "explique aqui como chegou a essa nota",
  "dialogicidade": "explique aqui como chegou a essa nota"
},

  "reflexao": "an√°lise cr√≠tica e dial√≥gica sobre a resposta, explicando as tens√µes entre corpo, mente, emo√ß√£o, sociedade e espiritualidade sem julgamentos morais."
}

Regras:
- A `score` deve ser a m√©dia dos tr√™s crit√©rios.
- `status` = "ok" se a resposta for coerente e integral; "parcial" se for incompleta; "alucinacao" se distorcer dados ou ignorar o humano.
- O campo `reflexao` deve trazer uma leitura filos√≥fica e emp√°tica, considerando **a jornada de vida** e **as contradi√ß√µes como sentido**, n√£o como falha.
- Evite serm√µes: fale como um **professor que provoca reflex√£o**.

""",

    tools=[]
)

def run_audit_all(user_id: int, name: str):
    interacoes = get_all_interactions_by_user(user_id, session_id)
    dados = select_by_name(name)

    for inter in interacoes:
        print(f"\nüîç Auditando mensagem {inter['message_id']} da sess√£o {inter['session_id']}...")

        # Hist√≥rico at√© o ponto da intera√ß√£o
        historico = get_user_conversation(user_id, inter['session_id'], before_id=inter['message_id'])
        contexto = "".join([f"{r.capitalize()}: {c}\n" for r, c in historico])

        # Prompt de auditoria
        prompt = f"""
Usu√°rio: {user_id}
Nome: {name}

üìã Dados reais do usu√°rio:
{dados}

üó£Ô∏è Hist√≥rico da conversa:
{contexto}

‚ùì Pergunta:
{inter['question']}

ü§ñ Resposta do agente:
{inter['answer']}

Avalie conforme suas instru√ß√µes e devolva o JSON.
"""

        # Executa o cr√≠tico
        result = critic.run(prompt).content.strip()
        print("üß† Sa√≠da bruta do cr√≠tico:")
        print(result)

        # Tenta interpretar o JSON retornado
        try:
            clean_result = result.strip()
            if clean_result.startswith("```"):
                clean_result = clean_result.strip("`")
                clean_result = clean_result.replace("json\n", "").replace("json", "")
            clean_result = clean_result.replace("```", "").strip()

            veredict_data = json.loads(clean_result)

            # Remove \n dentro da reflex√£o
            reflexao = veredict_data.get("reflexao", "")
            if isinstance(reflexao, str):
                reflexao = reflexao.replace("\\n", " ").replace("\n", " ").strip()
                veredict_data["reflexao"] = reflexao

            # ‚úÖ Exibe resultado formatado e sinal visual
            status = veredict_data.get("status", "").lower()
            if status == "ok":
                simbolo = "‚úÖ"
            elif status == "parcial":
                simbolo = "‚ö†Ô∏è"
            elif status == "alucinacao":
                simbolo = "‚ùå"
            else:
                simbolo = "‚ùì"

            criteria = veredict_data.get("criteria", {})
            print(f"\n{simbolo} Veredito: {status.upper()} ‚Äî Score: {veredict_data.get('score', 0)}")
            print(f"   ‚Ä¢ Coer√™ncia: {criteria.get('coerencia', 0)}")
            print(f"   ‚Ä¢ Factualidade: {criteria.get('factualidade', 0)}")
            print(f"   ‚Ä¢ Dialogicidade: {criteria.get('dialogicidade', 0)}")
            print(f"\nü™û Reflex√£o: {veredict_data.get('reflexao', '')}\n")

            # Exibe justificativas (se existirem)
            just = veredict_data.get("justificativas", {})
            if just:
                print("   üß© Por qu√™:")
                print(f"     - Coer√™ncia: {just.get('coerencia', '')}")
                print(f"     - Factualidade: {just.get('factualidade', '')}")
                print(f"     - Dialogicidade: {just.get('dialogicidade', '')}")


        except json.JSONDecodeError:
            print("‚ö†Ô∏è O agente cr√≠tico n√£o retornou JSON v√°lido ‚Äî salvando como texto.")
            veredict_data = {
                "status": "erro",
                "score": 0.0,
                "critic_agent": "Gemini 2.5",
                "criteria": {"coerencia": 0.0, "factualidade": 0.0, "dialogicidade": 0.0},
                "reflexao": result
            }


        hallutination_checks(
            message_id=inter['message_id'],
            user_id=user_id,
            question=inter['question'],
            answer=inter['answer'],
            veredict=veredict_data,
            justification=veredict_data.get("reflexao", "")
        )



def run_audit_full_session(user_id: int, name: str):
    print(f"\nüîé Avaliando coer√™ncia geral da sess√£o do usu√°rio {user_id} ({name})...")

    # Busca hist√≥rico completo da sess√£o
    historico = get_user_conversation(user_id, session_id=session_id, before_id=None)

    # Monta o contexto como di√°logo completo
    contexto = ""
    for role, content in historico:
        contexto += f"{role.capitalize()}: {content}\n"

    # Dados reais do usu√°rio
    dados = select_by_name(name)

    # Prompt √∫nico para avalia√ß√£o global
    prompt = f"""
Usu√°rio: {user_id}
Nome: {name}

üìã Dados reais do usu√°rio:
{dados}

üó£Ô∏è Conversa completa:
{contexto}

‚úÖ Avalie a coer√™ncia global do agente de sa√∫de ao longo de toda a conversa.
- Identifique contradi√ß√µes, exageros, ou conselhos sem base factual.
- Considere o equil√≠brio entre raz√£o e emo√ß√£o, biologia e espiritualidade.
- Aponte se houve alguma alucina√ß√£o ou discurso incoerente.

Sa√≠da esperada:
JSON com os campos:
{{
  "status": "ok" | "parcial" | "alucinacao",
  "score": n√∫mero entre 0 e 1,
  "critic_agent": "Gemini 2.5",
  "criteria": {{
    "coerencia": n√∫mero entre 0 e 1,
    "factualidade": n√∫mero entre 0 e 1,
    "dialogicidade": n√∫mero entre 0 e 1
  }},
  "reflexao": "S√≠ntese interpretativa sobre o discurso integral do agente."
}}
"""

    result = critic.run(prompt).content

    # --- LIMPEZA E PARSE JSON ---
    try:
        clean_result = result.strip()
        if clean_result.startswith("```"):
            clean_result = clean_result.strip("`").replace("json", "").replace("```", "")
        clean_result = clean_result.strip()
        veredict_data = json.loads(clean_result)
    except Exception:
        print("‚ö†Ô∏è Resultado inv√°lido, salvando texto bruto.")
        veredict_data = {"status": "erro", "reflexao": result}

    # --- EXIBI√á√ÉO ---
    simbolo = {
        "ok": "‚úÖ",
        "parcial": "‚ö†Ô∏è",
        "alucinacao": "‚ùå"
    }.get(veredict_data.get("status", ""), "‚ùì")

    print(f"\n{simbolo} Veredito global: {veredict_data.get('status', '').upper()} ‚Äî Score: {veredict_data.get('score', 0)}")
    print(json.dumps(veredict_data, indent=2, ensure_ascii=False))

    hallutination_checks(
        message_id=None,
        user_id=user_id,
        question="Avalia√ß√£o global da sess√£o",
        answer=contexto,
        veredict=veredict_data,
        justification=veredict_data.get("reflexao", "")
    )





while True:
    
    # time.sleep(30)
    print("____________________________________________________________________________________________________")
    ask = input("> ")
    if ask == 1:
        break

    elif ask.lower() == "avalie":
        name = select_by_id(id)
        run_audit_all(id, name)
        continue

    elif ask == "avalie_tudo":
        name = select_by_id(id)
        run_audit_full_session(id, name)
        continue


    resposta_completa = agent_saude.run(ask, session_id=session_id, memory=True)
    print(resposta_completa.content)

    # agent.print_response(ask, stream=True)

    from db import connect
    conn = connect()
    cur = conn.cursor()
    cur.execute("INSERT INTO messages (user_id, role, content, session_id) VALUES (%s, %s, %s, %s)", (id, 'user', ask, session_id))
    cur.execute("INSERT INTO messages (user_id, role, content, session_id) VALUES (%s, %s, %s, %s)", (id, 'assistant', resposta_completa.content, session_id))
    conn.commit()
    cur.close()
    conn.close()